foreign_class!(
    class SpaceGame {
        self_type SpaceGame;
        constructor SpaceGame::new(rgs: Vec<String>) -> SpaceGame;
        fn SpaceGame::get_sectors(&self) -> Vec<SectorData>;
        fn SpaceGame::list_jumps(&self) -> Vec<JumpData>;
        fn SpaceGame::get_jump(&self, id: u64) -> Option<JumpData>;
        fn SpaceGame::get_fleets(&self) -> Vec<ObjData>;
        fn SpaceGame::get_obj(&self, id: u64) -> Option<ObjData>;
        fn SpaceGame::get_obj_coords(&self, id: u64) -> Option<ObjCoords>;
        fn SpaceGame::update(&mut self, delta: f32);
        fn SpaceGame::take_events(&mut self) -> Vec<EventData>;
        fn SpaceGame::list_wares(&self) -> Vec<WareData>;
        fn SpaceGame::list_building_sites_prefabs(&self) -> Vec<PrefabData>;
        fn SpaceGame::new_building_plot(&self, plot_id: u64, sector_id: u64, pos_x: f32, pos_y: f32) -> u64;
    }
);

foreign_class!(
    class SectorData {
        self_type SectorData;
        private constructor = empty;
        fn SectorData::get_id(&self) -> u64;
        fn SectorData::get_coords(&self) -> (i32, i32);
        fn SectorData::get_label(&self) -> &str;
    }
);

foreign_class!(
    class JumpData {
        self_type JumpData;
        private constructor = empty;
        fn JumpData::get_id(&self) -> u64;
        fn JumpData::get_coords(&self) -> (f32, f32);
        fn JumpData::get_sector_id(&self) -> u64;
        fn JumpData::get_to_sector_id(&self) -> u64;
        fn JumpData::get_to_coords(&self) -> (f32, f32);
    }
);

foreign_class!(
    class ObjOrbitData {
        self_type ObjOrbitData;
        private constructor = empty;
        fn ObjOrbitData::get_parent_pos(&self) -> (f32, f32);
        fn ObjOrbitData::get_radius(&self) -> f32;
    }
);

foreign_class!(
    class ObjCoords{
        self_type ObjCoords;
        private constructor = empty;
        fn ObjCoords::get_coords(&self) -> (f32, f32);
        fn ObjCoords::get_sector_id(&self) -> u64;
        fn ObjCoords::is_docked(&self) -> bool;
    }
);

foreign_class!(
    class ObjData {
        self_type ObjData;
        private constructor = empty;
        fn ObjData::get_id(&self) -> u64;
        fn ObjData::get_sector_id(&self) -> u64;
        fn ObjData::get_coords(&self) -> (f32, f32);
        fn ObjData::get_docked_id(&self) -> Option<u64>;
        fn ObjData::get_orbit(&self) -> Option<ObjOrbitData>;
        fn ObjData::is_docked(&self) -> bool;
        fn ObjData::is_fleet(&self) -> bool;
        fn ObjData::is_station(&self) -> bool;
        fn ObjData::is_asteroid(&self) -> bool;
        fn ObjData::is_jump(&self) -> bool;
        fn ObjData::is_astro(&self) -> bool;
        fn ObjData::is_astro_star(&self) -> bool;
        fn ObjData::is_factory(&self) -> bool;
        fn ObjData::is_shipyard(&self) -> bool;
    }
);

foreign_class!(
    class ObjDesc {
        self_type ObjDesc;
        private constructor = empty;
        fn ObjDesc::get_id(&self) -> u64;
        fn ObjDesc::get_label(&self) -> &str;
        fn ObjDesc::get_action(&self) -> Option<ObjAction>;
        fn ObjDesc::get_cargo(&self) -> Option<ObjCargo>;
        fn ObjDesc::get_shipyard(&self) -> Option<ObjShipyard>;
        fn ObjDesc::get_factory(&self) -> Option<ObjFactory>;
        fn ObjDesc::get_docked_fleets(&self) -> Vec<u64>;
    }
);

foreign_enum!(
    enum ObjActionKind {
        Undock = ObjActionKind::Undock,
        Jump = ObjActionKind::Jump,
        Dock = ObjActionKind::Dock,
        MoveTo = ObjActionKind::MoveTo,
        MoveToTargetPos = ObjActionKind::MoveToTargetPos,
        Extract = ObjActionKind::Extract,
    }
);

foreign_class!(
    class ObjAction {
        self_type ObjAction;
        private constructor = empty;
        fn ObjAction::get_kind(&self) -> ObjActionKind;
        fn ObjAction::get_target(&self) -> Option<u64>;
        fn ObjAction::get_pos(&self) -> Option<(f32, f32)>;
    }
);

foreign_class!(
    class ObjCargo{
        self_type ObjCargo;
        private constructor = empty;
        fn ObjCargo::volume_total(&self) -> u32;
        fn ObjCargo::volume_max(&self) -> u32;
        fn ObjCargo::get_wares(&self) -> Vec<(u64, u32)>;
    }
);

foreign_enum!(
    enum EventKind {
        Add = EventKind::Add,
        Move = EventKind::Move,
        Jump = EventKind::Jump,
        Dock = EventKind::Dock,
        Undock = EventKind::Undock,
    }
);

foreign_class!(
    class EventData {
        self_type EventData;
        private constructor = empty;
        fn EventData::get_kind(&self) -> EventKind;
        fn EventData::get_id(&self) -> u64;
    }
);

foreign_class!(
    class WareData {
        self_type WareData;
        private constructor = empty;
        fn WareData::get_label(&self) -> &str;
        fn WareData::get_id(&self) -> u64;
    }
);

foreign_class!(
    class PrefabData {
        self_type PrefabData;
        private constructor = empty;
        fn PrefabData::get_label(&self) -> &str;
        fn PrefabData::get_id(&self) -> u64;
    }
);

foreign_class!(
    class ObjFactory {
        self_type ObjFactory;
        private constructor = empty;
        fn ObjFactory::is_producing(&self) -> bool;
        fn ObjFactory::get_receipt_label(&self) -> &str;
    }
);

foreign_class!(
    class ObjShipyard {
        self_type ObjShipyard;
        private constructor = empty;
        fn ObjShipyard::is_producing(&self) -> bool;
    }
);
