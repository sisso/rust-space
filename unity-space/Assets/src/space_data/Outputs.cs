// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace space_data
{

using global::System;
using global::FlatBuffers;

public struct Outputs : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Outputs GetRootAsOutputs(ByteBuffer _bb) { return GetRootAsOutputs(_bb, new Outputs()); }
  public static Outputs GetRootAsOutputs(ByteBuffer _bb, Outputs obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Outputs __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public space_data.EntityNew? EntitiesNew(int j) { int o = __p.__offset(4); return o != 0 ? (space_data.EntityNew?)(new space_data.EntityNew()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int EntitiesNewLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public space_data.EntityTeleport? EntitiesTeleport(int j) { int o = __p.__offset(6); return o != 0 ? (space_data.EntityTeleport?)(new space_data.EntityTeleport()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int EntitiesTeleportLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public space_data.EntityMove? EntitiesMove(int j) { int o = __p.__offset(8); return o != 0 ? (space_data.EntityMove?)(new space_data.EntityMove()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int EntitiesMoveLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public space_data.EntityJump? EntitiesJump(int j) { int o = __p.__offset(10); return o != 0 ? (space_data.EntityJump?)(new space_data.EntityJump()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int EntitiesJumpLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public space_data.EntityDock? EntitiesDock(int j) { int o = __p.__offset(12); return o != 0 ? (space_data.EntityDock?)(new space_data.EntityDock()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int EntitiesDockLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public space_data.EntityUndock? EntitiesUndock(int j) { int o = __p.__offset(14); return o != 0 ? (space_data.EntityUndock?)(new space_data.EntityUndock()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int EntitiesUndockLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public space_data.SectorNew? Sectors(int j) { int o = __p.__offset(16); return o != 0 ? (space_data.SectorNew?)(new space_data.SectorNew()).__assign(__p.__vector(o) + j * 4, __p.bb) : null; }
  public int SectorsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public space_data.JumpNew? Jumps(int j) { int o = __p.__offset(18); return o != 0 ? (space_data.JumpNew?)(new space_data.JumpNew()).__assign(__p.__vector(o) + j * 28, __p.bb) : null; }
  public int JumpsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<space_data.Outputs> CreateOutputs(FlatBufferBuilder builder,
      VectorOffset entities_newOffset = default(VectorOffset),
      VectorOffset entities_teleportOffset = default(VectorOffset),
      VectorOffset entities_moveOffset = default(VectorOffset),
      VectorOffset entities_jumpOffset = default(VectorOffset),
      VectorOffset entities_dockOffset = default(VectorOffset),
      VectorOffset entities_undockOffset = default(VectorOffset),
      VectorOffset sectorsOffset = default(VectorOffset),
      VectorOffset jumpsOffset = default(VectorOffset)) {
    builder.StartTable(8);
    Outputs.AddJumps(builder, jumpsOffset);
    Outputs.AddSectors(builder, sectorsOffset);
    Outputs.AddEntitiesUndock(builder, entities_undockOffset);
    Outputs.AddEntitiesDock(builder, entities_dockOffset);
    Outputs.AddEntitiesJump(builder, entities_jumpOffset);
    Outputs.AddEntitiesMove(builder, entities_moveOffset);
    Outputs.AddEntitiesTeleport(builder, entities_teleportOffset);
    Outputs.AddEntitiesNew(builder, entities_newOffset);
    return Outputs.EndOutputs(builder);
  }

  public static void StartOutputs(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddEntitiesNew(FlatBufferBuilder builder, VectorOffset entitiesNewOffset) { builder.AddOffset(0, entitiesNewOffset.Value, 0); }
  public static void StartEntitiesNewVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static void AddEntitiesTeleport(FlatBufferBuilder builder, VectorOffset entitiesTeleportOffset) { builder.AddOffset(1, entitiesTeleportOffset.Value, 0); }
  public static void StartEntitiesTeleportVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static void AddEntitiesMove(FlatBufferBuilder builder, VectorOffset entitiesMoveOffset) { builder.AddOffset(2, entitiesMoveOffset.Value, 0); }
  public static void StartEntitiesMoveVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddEntitiesJump(FlatBufferBuilder builder, VectorOffset entitiesJumpOffset) { builder.AddOffset(3, entitiesJumpOffset.Value, 0); }
  public static void StartEntitiesJumpVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static void AddEntitiesDock(FlatBufferBuilder builder, VectorOffset entitiesDockOffset) { builder.AddOffset(4, entitiesDockOffset.Value, 0); }
  public static void StartEntitiesDockVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static void AddEntitiesUndock(FlatBufferBuilder builder, VectorOffset entitiesUndockOffset) { builder.AddOffset(5, entitiesUndockOffset.Value, 0); }
  public static void StartEntitiesUndockVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static void AddSectors(FlatBufferBuilder builder, VectorOffset sectorsOffset) { builder.AddOffset(6, sectorsOffset.Value, 0); }
  public static void StartSectorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddJumps(FlatBufferBuilder builder, VectorOffset jumpsOffset) { builder.AddOffset(7, jumpsOffset.Value, 0); }
  public static void StartJumpsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(28, numElems, 4); }
  public static Offset<space_data.Outputs> EndOutputs(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<space_data.Outputs>(o);
  }
  public static void FinishOutputsBuffer(FlatBufferBuilder builder, Offset<space_data.Outputs> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedOutputsBuffer(FlatBufferBuilder builder, Offset<space_data.Outputs> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
